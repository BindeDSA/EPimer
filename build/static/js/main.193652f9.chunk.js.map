{"version":3,"sources":["components/Timer.js","services/getDigit.js","components/Display.js","components/Controls/Button.js","components/Controls/index.js","components/App.js","serviceWorker.js","redux/reducers/depth.js","redux/reducers/timer.js","redux/reducers/error.js","redux/reducers/index.js","redux/store.js","services/handleDepth.js","redux/actions.js","redux/actionTypes.js","index.js"],"names":["ConnectedTimer","this","interval","setInterval","forceUpdate","bind","props","updateInterval","clearInterval","start","stop","depth","elapsed","Date","getTime","getElapsedTime","style","fontWeight","fontFamily","fontSize","textAlign","display","width","React","Component","Timer","connect","state","timer","PiRequest","hundrends","pi","piHundrendsArr","num","hundred","getDigitSet","Math","floor","tensDepth","slice","pi1","pi2","pi3","pi4","pi5","Display","error","numString","GetDigit","getDigits","numStringStyle","padding","overflow","whiteSpace","direction","color","margin","buttonStyle","backgroundColor","borderWidth","border","cursor","justifyContent","paddingBottom","paddingLeft","paddingRight","paddingTop","webkitAppearance","alignItems","borderRadius","boxShadow","height","Button","onClick","document","dispatchEvent","KeyboardEvent","text","children","Controls","running","App","Boolean","window","location","hostname","match","depthReducer","action","type","timerReducer","now","undefined","errorReducer","rootReducers","combineReducers","createStore","rootReducer","HandleDepth","store","keyPressCheck","keyPress","console","log","getState","key","dispatch","isNaN","addEventListener","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.193652f9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction getElapsedTime(start, stop = new Date().getTime()) {\r\n    if (!start) {\r\n        return 0;\r\n    } else {\r\n        return stop - start;\r\n    }\r\n}\r\n\r\nclass ConnectedTimer extends React.Component {\r\n    componentDidMount() {\r\n        this.interval = setInterval(this.forceUpdate.bind(this), this.props.updateInterval || 33);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    render() {\r\n        const { start, stop, depth } = this.props;\r\n        const elapsed = getElapsedTime(start, stop);\r\n\r\n        return (\r\n            <div style={{fontWeight: 'bold', fontFamily: 'monospace', fontSize: '5vw', textAlign: 'center'}}>\r\n                <span style={{display: 'inline-block', width: '40vw', textAlign: 'left' }}>Time: {elapsed / 1000}</span>\r\n                <span>Digits: {depth}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({start: state.timer.start, stop: state.timer.stop,depth: state.depth });\r\n\r\nconst Timer = connect(mapStateToProps)(ConnectedTimer);\r\n\r\nexport default Timer;","class PiRequest {\r\n\r\n    static pi1 = '3141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067';\r\n    static pi2 = '9821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819';\r\n    static pi3 = '6442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127';\r\n    static pi4 = '3724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609';\r\n    static pi5 = '4330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491';\r\n\r\n\r\n    static piHundrendsArr = [this.pi1, this.pi2, this.pi3, this.pi4, this.pi5];\r\n\r\n    static getDigitSet(hundrends, pi = true) {\r\n        return pi ? this.piHundrendsArr[hundrends] : ''\r\n    }\r\n\r\n    static getDigits(depth, num = 1) {\r\n        let hundred = this.getDigitSet(Math.floor(depth / 100))\r\n        let tensDepth = depth % 100\r\n        return (hundred.slice(tensDepth, tensDepth + num))\r\n    }\r\n\r\n    returnAccurate(depth) {\r\n\r\n    }\r\n}\r\n\r\nexport default PiRequest","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport GetDigit from '../services/getDigit';\r\n\r\nconst ConnectedDisplay = ({ depth, error }) => {\r\n    const numString = depth === 0 ? 'Start typing pi' : '3.' + GetDigit.getDigits(1, depth - 1);\r\n    const numStringStyle = {\r\n        textAlign: depth === 0 ? 'center' : 'left',\r\n        padding: '',\r\n        overflow: 'hidden',\r\n        whiteSpace: 'nowrap',\r\n        direction: 'rtl',\r\n        color: error ? 'red' : '',\r\n    }\r\n    return (\r\n        <div style={{ width: '80vw', margin: 'auto', fontWeight: 'bold', fontFamily: 'monospace', fontSize: '5vw' }} >\r\n            {\r\n                depth === 1 ?\r\n                    <div>3.</div> :\r\n                    <div style={numStringStyle}>{numString}</div>\r\n            }\r\n\r\n            {depth ? \"Next: \" + GetDigit.getDigits(depth, 5) : (<span style={{color: 'white'}}>empty</span>)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({ depth: state.depth, error: state.error });\r\n\r\nconst Display = connect(mapStateToProps)(ConnectedDisplay);\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nconst buttonStyle = {\r\n    backgroundColor: '#fff',\r\n    borderWidth: '1px',\r\n    border: '1px solid #dbdbdb',\r\n    color: '#363636',\r\n    cursor: 'pointer',\r\n    justifyContent: 'center',\r\n    paddingBottom: 'calc(.5em - 1px)',\r\n    paddingLeft: '1em',\r\n    paddingRight: '1em',\r\n    paddingTop: 'calc(.5em - 1px)',\r\n    textAlign: 'center',\r\n    whiteSpace: 'nowrap',\r\n    fontSize: '5vw',\r\n    fontWeight: 'bold',\r\n    fontFamily: 'monospace',\r\n    webkitAppearance: 'none',\r\n    alignItems: 'center',\r\n    borderRadius: '4px',\r\n    boxShadow: 'none',\r\n    display: 'inline-flex',\r\n    height: '2.5em',\r\n    margin: '0'\r\n}\r\n\r\nconst Button = (props) => (\r\n    <a onClick={() => document.dispatchEvent(new KeyboardEvent('keypress', { 'key': props.text }))} style={buttonStyle}>\r\n        {props.children}\r\n    </a>);\r\n\r\nexport default Button;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Button from './Button'\r\n\r\nconst ConnectedControls = ({running}) => (\r\n    <div style={{ margin: 'auto', textAlign: 'center' }}>\r\n        <div>\r\n            <Button text='7'>7</Button>\r\n            <Button text='8'>8</Button>\r\n            <Button text='9'>9</Button> <br />\r\n            <Button text='4'>4</Button>\r\n            <Button text='5'>5</Button>\r\n            <Button text='6'>6</Button> <br />\r\n            <Button text='1'>1</Button>\r\n            <Button text='2'>2</Button>\r\n            <Button text='3'>3</Button><br />\r\n            <Button text='r'>reset</Button>\r\n            <Button text='0'>0</Button>\r\n            <Button text=' '>{running ? 'pause' : 'start'}</Button>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({running: state.timer.running});\r\n\r\nconst Controls = connect(mapStateToProps, {})(ConnectedControls);\r\n\r\nexport default Controls;","import React from 'react';\r\nimport Timer from './Timer';\r\nimport Display from './Display'\r\nimport Controls from './Controls';\r\n\r\nconst App = () => (\r\n    <div style={{fontFamily: 'monospace'}}>\r\n        <Timer />\r\n        <Display />\r\n        <Controls />\r\n    </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const depthReducer = (state = 0, action) => {\r\n    switch (action.type) {\r\n        case 'INCREMENT_DEPTH':\r\n            return state+1;\r\n        case 'RESET_DEPTH':\r\n            return 0;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default depthReducer","const timerReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case 'START_TIMER':\r\n            return { start: Date.now(), stop: undefined, running: true };\r\n        case 'STOP_TIMER':\r\n            return { start: state.start, stop: state.running ? Date.now() : state.stop, running: false };\r\n        case 'RESET_TIMER':\r\n            return { start: undefined, stop: undefined, running: false }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default timerReducer;","const errorReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case 'ERROR_FALSE':\r\n            return false;\r\n        case 'ERROR_TRUE':\r\n            return true;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\nexport default errorReducer;","import depthReducer from './depth'\r\nimport timerReducer from './timer'\r\nimport errorReducer from './error'\r\nimport { combineReducers } from 'redux';\r\n\r\nconst rootReducers = combineReducers({\r\n    depth: depthReducer,\r\n    timer: timerReducer,\r\n    error: errorReducer,\r\n})\r\n\r\nexport default rootReducers;","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default createStore(rootReducer);\r\n","import GetDigit from './getDigit';\r\nimport { incrementDepth, resetDepth, startTimer, stopTimer, resetTimer, errorTrue, errorFalse } from '../redux/actions'\r\n\r\nclass HandleDepth {\r\n    store;\r\n\r\n    constructor(store) {\r\n        console.log(store)\r\n        this.store = store;\r\n        document.addEventListener('keypress', this.keyPressCheck);\r\n    }\r\n\r\n    keyPressCheck = (keyPress) => {\r\n        console.log(keyPress)\r\n        const state = this.store.getState();\r\n        if (keyPress.key === GetDigit.getDigits(state.depth)) {\r\n            this.store.dispatch(incrementDepth());\r\n            this.store.dispatch(errorFalse())\r\n            if (state.depth === 0) {\r\n                this.store.dispatch(startTimer())\r\n            }\r\n        } else if (!isNaN(keyPress.key)) {\r\n            this.store.dispatch(errorTrue())\r\n        }\r\n\r\n        if (keyPress.key === ' ') {\r\n            if (state.timer.running) {\r\n                this.store.dispatch(stopTimer())\r\n            } else {\r\n                this.store.dispatch(resetDepth())\r\n            }\r\n        }\r\n\r\n        if (keyPress.key === 'r') {\r\n            this.store.dispatch(resetDepth())\r\n            this.store.dispatch(resetTimer())\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default HandleDepth;","import { INCREMENT_DEPTH, RESET_DEPTH, START_TIMER, STOP_TIMER, RESET_TIMER, ERROR_TRUE, ERROR_FALSE } from './actionTypes';\r\n\r\nexport const incrementDepth = () => ({\r\n    type: INCREMENT_DEPTH,\r\n});\r\n\r\nexport const resetDepth = () => ({\r\n    type: RESET_DEPTH,\r\n});\r\n\r\nexport const startTimer = () => ({\r\n    type: START_TIMER,\r\n});\r\n\r\nexport const stopTimer = () => ({\r\n    type: STOP_TIMER,\r\n})\r\n\r\nexport const resetTimer = () => ({\r\n    type: RESET_TIMER,\r\n})\r\n\r\nexport const errorTrue = () => ({\r\n    type: ERROR_TRUE,\r\n})\r\n\r\nexport const errorFalse = () => ({\r\n    type: ERROR_FALSE,\r\n})","export const INCREMENT_DEPTH = 'INCREMENT_DEPTH';\r\nexport const RESET_DEPTH = 'RESET_DEPTH';\r\nexport const START_TIMER = 'START_TIMER';\r\nexport const STOP_TIMER = 'STOP_TIMER';\r\nexport const RESET_TIMER = 'RESET_TIMER';\r\nexport const ERROR_TRUE = 'ERROR_TRUE';\r\nexport const ERROR_FALSE = 'ERROR_FALSE';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport HandleDepth from './services/handleDepth'\nimport 'bulma/css/bulma.min.css';\n\nnew HandleDepth(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}